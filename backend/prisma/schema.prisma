generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserAccount {
  id                      String                  @id @default(uuid()) @map("id")
  name                    String                  @map("name") @db.VarChar(255)
  email                   String                  @unique @map("email") @db.VarChar(255)
  password                String                  @map("password") @db.VarChar(255)
  registrationNumber      String?                 @unique @map("registration_number") @db.VarChar(20)
  photoFilePath           String?                 @map("photo_file_path") @db.VarChar(255)
  profile                 Profile                 @default(DoctoralStudent) @map("profile")
  level                   UserLevel               @default(Default) @map("level")
  isActive                Boolean                 @default(true) @map("is_active")
  createdAt               DateTime                @default(now()) @map("created_at")
  updatedAt               DateTime                @updatedAt @map("updated_at")
  isVerified              Boolean                 @default(false) @map("is_verified")
  registrationNumberType  RegistrationNumberType? @map("registration_number_type")
  isAdmin                 Boolean                 @default(false) @map("is_admin")
  isSuperadmin            Boolean                 @default(false) @map("is_superadmin")
  isTeacherActive         Boolean                 @default(false) @map("is_teacher_active")
  panelistAwards          AwardedPanelist[]
  certificates            Certificate[]
  committeeMemberships    CommitteeMember[]
  EmailVerification       EmailVerification?
  evaluations             Evaluation[]
  panelistParticipations  Panelist[]
  advisorFor              Submission[]            @relation("AdvisorRelation")
  mainAuthored            Submission[]            @relation("MainAuthorRelation")
  bookmarkedPresentations Presentation[]          @relation("PresentationToUserAccount")

  @@map("user_account")
}

model EmailVerification {
  id                      String      @id @default(uuid()) @map("id")
  userId                  String      @unique @map("user_id")
  emailVerificationToken  String?     @unique @map("email_verification_token")
  emailVerifiedAt         DateTime?   @map("email_verified_at")
  emailVerificationSentAt DateTime?   @map("email_verification_sent_at")
  createdAt               DateTime    @default(now()) @map("created_at")
  updatedAt               DateTime    @updatedAt @map("updated_at")
  user                    UserAccount @relation(fields: [userId], references: [id])

  @@map("email_verification")
}

model EventEdition {
  id                                String               @id @default(uuid()) @map("id")
  name                              String               @map("name") @db.VarChar(255)
  description                       String               @map("description")
  callForPapersText                 String               @map("call_for_papers_text")
  partnersText                      String               @map("partners_text")
  location                          String               @map("location")
  startDate                         DateTime             @map("start_date")
  endDate                           DateTime             @map("end_date")
  submissionStartDate               DateTime             @map("submission_start_date")
  submissionDeadline                DateTime             @map("submission_deadline")
  isActive                          Boolean              @default(false) @map("is_active")
  isEvaluationRestrictToLoggedUsers Boolean              @default(true) @map("is_evaluation_restrict_to_logged_users")
  presentationDuration              Int                  @default(20) @map("presentation_duration")
  presentationsPerPresentationBlock Int                  @default(6) @map("presentations_per_presentation_block")
  createdAt                         DateTime             @default(now()) @map("created_at")
  updatedAt                         DateTime             @updatedAt @map("updated_at")
  awardedPanelists                  AwardedPanelist[]
  certificates                      Certificate[]
  committeeMembers                  CommitteeMember[]
  EvaluationCriteria                EvaluationCriteria[]
  guidance                          Guidance?
  presentationBlocks                PresentationBlock[]
  rooms                             Room[]
  submissions                       Submission[]

  @@map("event_edition")
}

model CommitteeMember {
  id             String         @id @default(uuid()) @map("id")
  eventEditionId String         @map("event_edition_id")
  userId         String         @map("user_id")
  level          CommitteeLevel @map("level")
  role           CommitteeRole  @map("role")
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")
  eventEdition   EventEdition   @relation(fields: [eventEditionId], references: [id], onDelete: Cascade)
  user           UserAccount    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventEditionId, userId])
  @@map("committee_member")
}

model EvaluationCriteria {
  id             String       @id @default(uuid()) @map("id")
  eventEditionId String       @map("event_edition_id")
  title          String       @map("title") @db.VarChar(255)
  description    String       @map("description")
  weightRadio    Float?       @map("weight_radio")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  evaluations    Evaluation[]
  eventEdition   EventEdition @relation(fields: [eventEditionId], references: [id], onDelete: Cascade)

  @@map("evaluation_criteria")
}

model Evaluation {
  id                   String             @id @default(uuid()) @map("id")
  userId               String?            @map("user_id")
  evaluationCriteriaId String             @map("evaluation_criteria_id")
  submissionId         String             @map("submission_id")
  score                Float              @map("score")
  comments             String?            @map("comments")
  name                 String?            @map("name") @db.VarChar(255)
  email                String?            @map("email") @db.VarChar(255)
  createdAt            DateTime           @default(now()) @map("created_at")
  updatedAt            DateTime           @updatedAt @map("updated_at")
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id])
  submission           Submission         @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  user                 UserAccount?       @relation(fields: [userId], references: [id])

  @@map("evaluation")
}

model Submission {
  id                          String           @id @default(uuid()) @map("id")
  advisorId                   String           @map("advisor_id")
  mainAuthorId                String           @map("main_author_id")
  eventEditionId              String           @map("event_edition_id")
  title                       String           @map("title") @db.VarChar(255)
  abstract                    String           @map("abstract")
  pdfFile                     String           @map("pdf_file") @db.VarChar(255)
  phoneNumber                 String           @map("phone_number") @db.VarChar(20)
  proposedPresentationBlockId String?          @map("proposed_presentation_block_id")
  proposedPositionWithinBlock Int?             @map("proposed_position_within_block")
  coAdvisor                   String?          @map("co_advisor") @db.VarChar(255)
  status                      SubmissionStatus @map("status")
  createdAt                   DateTime         @default(now()) @map("created_at")
  updatedAt                   DateTime         @updatedAt @map("updated_at")
  Evaluation                  Evaluation[]
  Presentation                Presentation[]
  advisor                     UserAccount      @relation("AdvisorRelation", fields: [advisorId], references: [id])
  eventEdition                EventEdition     @relation(fields: [eventEditionId], references: [id], onDelete: Cascade)
  mainAuthor                  UserAccount      @relation("MainAuthorRelation", fields: [mainAuthorId], references: [id], onDelete: Cascade)

  @@map("submission")
}

model Panelist {
  id                  String            @id @default(uuid()) @map("id")
  presentationBlockId String            @map("presentation_block_id")
  userId              String            @map("user_id")
  status              PanelistStatus    @default(Confirmed) @map("status")
  createdAt           DateTime          @default(now()) @map("created_at")
  updatedAt           DateTime          @updatedAt @map("updated_at")
  presentationBlock   PresentationBlock @relation(fields: [presentationBlockId], references: [id], onDelete: Cascade)
  user                UserAccount       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("panelist")
}

model AwardedPanelist {
  eventEditionId String       @map("event_edition_id")
  userId         String       @map("user_id")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  eventEdition   EventEdition @relation(fields: [eventEditionId], references: [id], onDelete: Cascade)
  user           UserAccount  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([eventEditionId, userId])
  @@map("awarded_panelist")
}

model Room {
  id             String       @id @default(uuid()) @map("id")
  eventEditionId String       @map("event_edition_id")
  name           String       @map("name") @db.VarChar(255)
  description    String?      @map("description")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  eventEdition   EventEdition @relation(fields: [eventEditionId], references: [id], onDelete: Cascade)

  @@map("room")
}

model Certificate {
  id             String       @id @default(uuid()) @map("id")
  eventEditionId String       @map("event_edition_id")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  filePath       String       @map("file_path")
  isEmailSent    Boolean      @default(false) @map("is_email_sent")
  userId         String       @map("user_id")
  eventEdition   EventEdition @relation(fields: [eventEditionId], references: [id], onDelete: Cascade)
  user           UserAccount  @relation(fields: [userId], references: [id])

  @@map("certificate")
}

model PresentationBlock {
  id             String                @id @default(uuid()) @map("id")
  eventEditionId String                @map("event_edition_id")
  roomId         String?               @map("room_id")
  type           PresentationBlockType @map("type")
  title          String?               @map("title") @db.VarChar(255)
  speakerName    String?               @map("speaker_name") @db.VarChar(255)
  startTime      DateTime              @map("start_time")
  duration       Int                   @map("duration")
  createdAt      DateTime              @default(now()) @map("created_at")
  updatedAt      DateTime              @updatedAt @map("updated_at")
  panelists      Panelist[]
  presentations  Presentation[]
  eventEdition   EventEdition          @relation(fields: [eventEditionId], references: [id], onDelete: Cascade)

  @@map("presentation_block")
}

model Presentation {
  id                     String             @id @default(uuid()) @map("id")
  submissionId           String             @map("submission_id")
  presentationBlockId    String             @map("presentation_block_id")
  positionWithinBlock    Int                @map("position_within_block")
  status                 PresentationStatus @map("status")
  createdAt              DateTime           @default(now()) @map("created_at")
  updatedAt              DateTime           @updatedAt @map("updated_at")
  publicAverageScore     Float?             @map("public_average_score")
  evaluatorsAverageScore Float?             @map("evaluators_average_score")
  presentationBlock      PresentationBlock  @relation(fields: [presentationBlockId], references: [id], onDelete: Cascade)
  submission             Submission         @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  bookmarkedUsers        UserAccount[]      @relation("PresentationToUserAccount")

  @@map("presentation")
}

model Guidance {
  id               String       @id @default(uuid()) @map("id")
  summary          String?      @map("summary")
  authorGuidance   String?      @map("authors_guidance")
  reviewerGuidance String?      @map("reviewers_guidance")
  audienceGuidance String?      @map("audience_guidance")
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")
  eventEditionId   String       @unique @map("event_edition_id")
  eventEdition     EventEdition @relation(fields: [eventEditionId], references: [id], onDelete: Cascade)

  @@map("guidance")
}

enum Profile {
  DoctoralStudent
  Professor
  Listener

  @@map("profile")
}

enum UserLevel {
  Superadmin
  Admin
  Default

  @@map("user_level")
}

enum CommitteeLevel {
  Committee
  Coordinator

  @@map("committee_level")
}

enum CommitteeRole {
  OrganizingCommittee
  StudentVolunteers
  AdministativeSupport
  Communication
  ITSupport

  @@map("committee_role")
}

enum PresentationStatus {
  ToPresent
  Presented
  NotPresented

  @@map("presentation_status")
}

enum SubmissionStatus {
  Submitted
  Confirmed
  Rejected

  @@map("submission_status")
}

enum PanelistStatus {
  Pending
  Confirmed
  Rejected
  Present
  Missing

  @@map("panelist_status")
}

enum PresentationBlockType {
  General
  Presentation

  @@map("presentation_block_type")
}

enum AdminApprovalStatus {
  Pending
  Approved
  Rejected

  @@map("admin_approval_status")
}

enum RegistrationNumberType {
  CPF
  MATRICULA
}
